[{"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Scene.js":"1","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\App.js":"2","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\State\\context.js":"3","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Rubiks.js":"4","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\TopBar.js":"5","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Face.js":"6","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\reportWebVitals.js":"7","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceZero.js":"8","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceOne.js":"9","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceTwo.js":"10","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Cube.js":"11","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js":"12","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\index.js":"13","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Effects.js":"14","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Util\\Rotations.js":"15","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\App.js":"16","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Rubiks.js":"17","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js":"18","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Scene.js":"19","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\State\\context.js":"20","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Util\\Rotations.js":"21","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Cube.js":"22"},{"size":3203,"mtime":1613544973673,"results":"23","hashOfConfig":"24"},{"size":1864,"mtime":1613868876962,"results":"25","hashOfConfig":"24"},{"size":5148,"mtime":1614747504907,"results":"26","hashOfConfig":"24"},{"size":5875,"mtime":1614748217280,"results":"27","hashOfConfig":"24"},{"size":242,"mtime":1613869853689,"results":"28","hashOfConfig":"24"},{"size":418,"mtime":1612336816333,"results":"29","hashOfConfig":"24"},{"size":362,"mtime":1611629125939,"results":"30","hashOfConfig":"24"},{"size":574,"mtime":1612500135755,"results":"31","hashOfConfig":"24"},{"size":576,"mtime":1612644836226,"results":"32","hashOfConfig":"24"},{"size":577,"mtime":1612500127501,"results":"33","hashOfConfig":"24"},{"size":1327,"mtime":1614747563587,"results":"34","hashOfConfig":"24"},{"size":712,"mtime":1612051596853,"results":"35","hashOfConfig":"24"},{"size":500,"mtime":1611629125939,"results":"36","hashOfConfig":"24"},{"size":1562,"mtime":1612063328330,"results":"37","hashOfConfig":"24"},{"size":9955,"mtime":1613883893353,"results":"38","hashOfConfig":"24"},{"size":1688,"mtime":1613547731608,"results":"39","hashOfConfig":"40"},{"size":3543,"mtime":1613547644210,"results":"41","hashOfConfig":"40"},{"size":712,"mtime":1612051596853,"results":"42","hashOfConfig":"40"},{"size":3203,"mtime":1613544973673,"results":"43","hashOfConfig":"40"},{"size":3963,"mtime":1613544472387,"results":"44","hashOfConfig":"40"},{"size":8454,"mtime":1613548263214,"results":"45","hashOfConfig":"40"},{"size":2409,"mtime":1613544106152,"results":"46","hashOfConfig":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u12yq",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"8zvi1z",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Scene.js",["95"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\App.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\State\\context.js",["96","97"],"/* eslint-disable no-duplicate-case */\r\nimport React from 'react'\r\nimport { moves } from '../Util/Rotations';\r\n\r\nconst space = 1.2;\r\nconst generateInitialPositions = () => {\r\n\tlet positions = [];\r\n\tfor (let z = 2; z > -1; z--){\r\n\t\tfor (let y = 2; y > -1; y--){\r\n\t\t\tfor (let x = -1; x < 2; x++){\r\n\t\t\t\tlet pos = [x, y, z].map(e => e * space);\r\n\t\t\t\tpositions.push(pos);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn positions;\r\n}\r\n\r\nexport const DefaultState = {\r\n\tArrowDown: false,\r\n\tArrowUp: false,\r\n\tArrowLeft: false,\r\n\tArrowRight: false,\r\n\tfaceConfig: 0,\r\n\tmove: null,\r\n\tdebug_move: null,\r\n\tmoving: false,\r\n\r\n\t// this object maintains the data for animations only\r\n\trotations: {\r\n\t\t// face configuration type Zero\r\n\t\t0: {\r\n\t\t\t0: 0, // faceID zero z rotation\r\n\t\t\t1: 0, // faceID one z rotation\r\n\t\t\t2: 0  // faceID two z rotation\r\n\t\t},\r\n\t\t// face configuration type One\r\n\t\t1: {\r\n\t\t\t0: 0, // y rotation\r\n\t\t\t1: 0, // y rotation\r\n\t\t\t2: 0  // y rotation\r\n\t\t},\r\n\t\t// face configuration type Two\r\n\t\t2: {\r\n\t\t\t0: 0, // x rotation\r\n\t\t\t1: 0, // x rotation\r\n\t\t\t2: 0  // x rotation\r\n\t\t}\r\n\t},\r\n\tpositions: [\r\n\t\t0,1,2,\r\n\t\t3,4,5,\r\n\t\t6,7,8,\r\n\r\n\t\t9,10,11,\r\n\t\t12,13,14,\r\n\t\t15,16,17,\r\n\r\n\t\t18,19,20,\r\n\t\t21,22,23,\r\n\t\t24,25,26\r\n\t],\r\n\r\n\t// cubeName is index for each cube's rotation array\r\n\tcubeRotations: [\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\t\t[0,0,0],[0,0,0],[0,0,0],\r\n\t\t[0,0,0],[0,0,0],[0,0,0]\r\n\t],\r\n\r\n\t// cubeName is index for each cube's axel mapping array\r\n\tcubeAxelMapping: [\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t\t[0,1,2],[0,1,2],[0,1,2],\r\n\t],\r\n\tpositionMap: [\r\n\t\t[\r\n\t\t\t24, 25, 26,\r\n\t\t\t21, 22, 23,\r\n\t\t\t18, 19, 20,\r\n\t\t\t\r\n\t\t\t15, 16, 17,\r\n\t\t\t12, 13, 14,\r\n\t\t\t9, 10, 11,\r\n\t\t\r\n\t\t\t6, 7, 8,\r\n\t\t\t3, 4, 5,\r\n\t\t\t0, 1, 2\r\n\t\t],\r\n\t\t[\r\n\t\t\t20,23,26,\r\n\t\t\t11,14,17,\r\n\t\t\t2,5,8,\r\n\t\t\r\n\t\t\t19,22,25,\r\n\t\t\t10,13,16,\r\n\t\t\t1,4,7,\r\n\t\t\r\n\t\t\t18,21,24,\r\n\t\t\t9,12,15,\r\n\t\t\t0,3,6\r\n\t\t],\r\n\t\t[\r\n\t\t\t8,17,26,\r\n\t\t\t7,16,25,\r\n\t\t\t6,15,24,\r\n\t\t\r\n\t\t\t5,14,23,\r\n\t\t\t4,13,22,\r\n\t\t\t3,12,21,\r\n\t\t\r\n\t\t\t2,11,20,\r\n\t\t\t1,10,19,\r\n\t\t\t0,9,18\r\n\t\t]\r\n\t],\r\n\tspin: [0, 0, 0],\r\n\r\n\r\n\r\n\t// four by four\r\n\tpos: generateInitialPositions()\r\n}\r\n\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n\tlet newState;\r\n\tlet inc = 45;\r\n\tswitch(action.type){\r\n\t\tcase 'ArrowLeft':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.type]: action.payload\r\n\t\t\t};\r\n\t\tcase 'ArrowRight':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.type]: action.payload\r\n\t\t\t};\r\n\t\tcase 'ArrowUp':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.type]: action.payload\r\n\t\t\t};\r\n\t\tcase 'ArrowDown':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.type]: action.payload\r\n\t\t\t};\r\n\t\tcase 'faceConfig':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tfaceConfig: action.payload\r\n\t\t\t}\r\n\t\tcase 'move':\r\n\t\t\t// update faceConfig to appropriate move\r\n\t\t\tlet newFaceConfig = moves[action.payload].faceConfig;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmoving: true,\r\n\t\t\t\tmove: action.payload,\r\n\t\t\t\tfaceConfig: newFaceConfig,\r\n\t\t\t}\r\n\t\tcase 'debug_move':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmoving: true,\r\n\t\t\t\tdebug_move: action.payload\r\n\t\t\t}\r\n\t\tcase 'endMove':\r\n\t\t\tif (state.moving){\r\n\t\t\t\tlet { positions, cubeRotations, cubeAxelMapping } = state;\r\n\t\t\t\tpositions = moves[state.move].operation(positions);\r\n\t\t\t\tlet { rotations, am } = moves[state.move].cubeOperation(cubeRotations, positions, cubeAxelMapping);\r\n\t\t\t\tcubeRotations = rotations;\r\n\t\t\t\tcubeAxelMapping = am;\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tmove: null,                        // unset move\r\n\t\t\t\t\tmoving: false,                     // prevents further animation, and allows next move\r\n\t\t\t\t\trotations: DefaultState.rotations, // reset each face to its default state\r\n\t\t\t\t\tpositions,                         // update cubes to new positions,\r\n\t\t\t\t\tcubeRotations,                     // rotate each individual cube so that it faces the correct direction\r\n\t\t\t\t\tcubeAxelMapping                    // update the axel orientation for each cube\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\tcase 'setRotations':\r\n\t\t\tlet newRotations = { \r\n\t\t\t\t...state.rotations, \r\n\t\t\t\t[action.payload.faceConfig]: {\r\n\t\t\t\t\t...state.rotations[action.payload.faceConfig],\r\n\t\t\t\t\t[action.payload.faceID]: action.payload.newVal\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\trotations: newRotations\r\n\t\t\t}\r\n\t\tcase 'setDebugSpin':\r\n\t\t\tconsole.log(action.payload);\r\n\t\t\tlet newSpin = Array.from(state.spin);\r\n\t\t\tlet newCubeRotations = JSON.parse(JSON.stringify(state.cubeRotations));\r\n\t\t\tnewCubeRotations[0][action.payload.axis] = action.payload.newVal;\r\n\t\t\tnewSpin[action.payload.axis] = action.payload.newVal;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcubeRotations: newCubeRotations\r\n\t\t\t\t//spin: newSpin\r\n\t\t\t}\r\n\t\tcase 'endDebugMove':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdebug_move: null,\r\n\t\t\t\tmoving: false\r\n\t\t\t};\r\n\t\tdefault:\r\n\t}\r\n\treturn state;\r\n}\r\n\r\nexport const AppDispatchContext = React.createContext(DefaultState);\r\nexport const AppStateContext = React.createContext(DefaultState);","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Rubiks.js",["98"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\TopBar.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Face.js",[],["99","100"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\reportWebVitals.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceZero.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceOne.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceTwo.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Cube.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\index.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Effects.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Util\\Rotations.js",["101","102"],"// moves according to this source\r\n// https://ruwix.com/the-rubiks-cube/notation/\r\n\r\n\r\nconst rotatef = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[0] = n[6];\r\n\tnn[1] = n[3];\r\n\tnn[2] = n[0];\r\n\r\n\tnn[3] = n[7];\r\n\tnn[4] = n[4];\r\n\tnn[5] = n[1];\r\n\r\n\tnn[6] = n[8];\r\n\tnn[7] = n[5];\r\n\tnn[8] = n[2];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateF = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[6] = n[0];\r\n\tnn[3] = n[1];\r\n\tnn[0] = n[2];\r\n\r\n\tnn[7] = n[3];\r\n\tnn[4] = n[4];\r\n\tnn[1] = n[5];\r\n\t\r\n\tnn[8] = n[6];\r\n\tnn[5] = n[7];\r\n\tnn[2] = n[8];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateb = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[18] = n[20];\r\n\tnn[19] = n[23];\r\n\tnn[20] = n[26];\r\n\r\n\tnn[21] = n[19];\r\n\tnn[22] = n[22];\r\n\tnn[23] = n[25];\r\n\t\r\n\tnn[24] = n[18];\r\n\tnn[25] = n[21];\r\n\tnn[26] = n[24];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateB = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[20] = n[18];\r\n\tnn[23] = n[19];\r\n\tnn[26] = n[20];\r\n\r\n\tnn[19] = n[21];\r\n\tnn[22] = n[22];\r\n\tnn[25] = n[23];\r\n\t\r\n\tnn[18] = n[24];\r\n\tnn[21] = n[25];\r\n\tnn[24] = n[26];\r\n\treturn nn;\r\n}\r\n\r\nconst rotates = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[9] = n[15];\r\n\tnn[10] = n[12];\r\n\tnn[11] = n[9];\r\n\r\n\tnn[12] = n[16];\r\n\tnn[13] = n[13];\r\n\tnn[14] = n[10];\r\n\t\r\n\tnn[15] = n[17];\r\n\tnn[16] = n[14];\r\n\tnn[17] = n[11];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateS = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[15] = n[9];\r\n\tnn[12] = n[10];\r\n\tnn[9] = n[11];\r\n\r\n\tnn[16] = n[12];\r\n\tnn[13] = n[13];\r\n\tnn[10] = n[14];\r\n\t\r\n\tnn[17] = n[15];\r\n\tnn[14] = n[16];\r\n\tnn[11] = n[17];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateu = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[0] = n[2];\r\n\tnn[1] = n[11];\r\n\tnn[2] = n[20];\r\n\r\n\tnn[9] = n[1];\r\n\tnn[10] = n[10];\r\n\tnn[11] = n[19];\r\n\t\r\n\tnn[18] = n[0];\r\n\tnn[19] = n[9];\r\n\tnn[20] = n[18];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateU = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[2] = n[0];\r\n\tnn[11] = n[1];\r\n\tnn[20] = n[2];\r\n\r\n\tnn[1] = n[9];\r\n\tnn[10] = n[10];\r\n\tnn[19] = n[11];\r\n\t\r\n\tnn[0] = n[18];\r\n\tnn[9] = n[19];\r\n\tnn[18] = n[20];\r\n\treturn nn;\r\n}\r\n\r\nconst rotated = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[6] = n[24];\r\n\tnn[7] = n[15];\r\n\tnn[8] = n[6];\r\n\r\n\tnn[15] = n[25];\r\n\tnn[16] = n[16];\r\n\tnn[17] = n[7];\r\n\t\r\n\tnn[24] = n[26];\r\n\tnn[25] = n[17];\r\n\tnn[26] = n[8];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateD = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[24] = n[6];\r\n\tnn[15] = n[7];\r\n\tnn[6] = n[8];\r\n\r\n\tnn[25] = n[15];\r\n\tnn[16] = n[16];\r\n\tnn[7] = n[17];\r\n\t\r\n\tnn[26] = n[24];\r\n\tnn[17] = n[25];\r\n\tnn[8] = n[26];\r\n\treturn nn;\r\n}\r\n\r\nconst rotatee = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[3] = n[21];\r\n\tnn[4] = n[12];\r\n\tnn[5] = n[3];\r\n\r\n\tnn[12] = n[22];\r\n\tnn[13] = n[13];\r\n\tnn[14] = n[4];\r\n\t\r\n\tnn[21] = n[23];\r\n\tnn[22] = n[14];\r\n\tnn[23] = n[5];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateE = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[21] = n[3];\r\n\tnn[12] = n[4];\r\n\tnn[3] = n[5];\r\n\r\n\tnn[22] = n[12];\r\n\tnn[13] = n[13];\r\n\tnn[4] = n[14];\r\n\t\r\n\tnn[23] = n[21];\r\n\tnn[14] = n[22];\r\n\tnn[5] = n[23];\r\n\treturn nn;\r\n}\r\n\r\nconst rotatel = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[0] = n[18];\r\n\tnn[3] = n[9];\r\n\tnn[6] = n[0];\r\n\r\n\tnn[9] = n[21];\r\n\tnn[12] = n[12];\r\n\tnn[15] = n[3];\r\n\t\r\n\tnn[18] = n[24];\r\n\tnn[21] = n[15];\r\n\tnn[24] = n[6];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateL = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[18] = n[0];\r\n\tnn[9] = n[3];\r\n\tnn[0] = n[6];\r\n\r\n\tnn[21] = n[9];\r\n\tnn[12] = n[12];\r\n\tnn[3] = n[15];\r\n\t\r\n\tnn[24] = n[18];\r\n\tnn[15] = n[21];\r\n\tnn[6] = n[24];\r\n\treturn nn;\r\n}\r\n\r\nconst rotater = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[2] = n[8];\r\n\tnn[11] = n[5];\r\n\tnn[20] = n[2];\r\n\r\n\tnn[5] = n[17];\r\n\tnn[14] = n[14];\r\n\tnn[23] = n[11];\r\n\t\r\n\tnn[8] = n[26];\r\n\tnn[17] = n[23];\r\n\tnn[26] = n[20];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateR = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[8] = n[2];\r\n\tnn[5] = n[11];\r\n\tnn[2] = n[20];\r\n\r\n\tnn[17] = n[5];\r\n\tnn[14] = n[14];\r\n\tnn[11] = n[23];\r\n\t\r\n\tnn[26] = n[8];\r\n\tnn[23] = n[17];\r\n\tnn[20] = n[26];\r\n\treturn nn;\r\n}\r\n\r\nconst rotatem = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[1] = n[19];\r\n\tnn[10] = n[22];\r\n\tnn[19] = n[25];\r\n\r\n\tnn[4] = n[10];\r\n\tnn[13] = n[13];\r\n\tnn[22] = n[16];\r\n\t\r\n\tnn[7] = n[1];\r\n\tnn[16] = n[4];\r\n\tnn[25] = n[7];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateM = (n) => {\r\n\tlet nn = Array.from(n);\r\n\tnn[19] = n[1];\r\n\tnn[22] = n[10];\r\n\tnn[25] = n[19];\r\n\r\n\tnn[10] = n[4];\r\n\tnn[13] = n[13];\r\n\tnn[16] = n[22];\r\n\t\r\n\tnn[1] = n[7];\r\n\tnn[4] = n[16];\r\n\tnn[7] = n[25];\r\n\treturn nn;\r\n}\r\n\r\nconst rotateCube = (cubeRotations, positions, cubeAxelMapping, poss, clockwise, axis = 2) => {\r\n\tlet rotations = JSON.parse(JSON.stringify(cubeRotations));\r\n\tlet am = JSON.parse(JSON.stringify(cubeAxelMapping));\r\n\t\r\n\tposs.forEach(pos => {\r\n\t\tlet name = positions[pos];\r\n\t\tlet real_axis = am[name][axis];\r\n\t\tlet invert = real_axis !== axis;\r\n\t\tif (name === 0){\r\n\t\t\tconsole.log(`axis: ${axis}, real_axis: ${real_axis}, [${am[0][0]}, ${am[0][1]}, ${am[0][2]}]`);\r\n\t\t}\r\n\r\n\t\t\r\n\t\t//clockwise = (invert) ? !clockwise:clockwise;\r\n\r\n\t\t// perform rotation on axis\r\n\t\tif (clockwise){\r\n\t\t\trotations[name][real_axis] += 90;\r\n\t\t\tif (name === 0){\r\n\t\t\t\tconsole.log(`added 90 to ${real_axis}`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trotations[name][real_axis] -= 90;\r\n\t\t\tif (name === 0){ \r\n\t\t\t\tconsole.log(`subtracted 90 from ${real_axis}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// adjust axis\r\n\t\t//adjustAxis();\r\n\t\tfunction adjustAxis(){\r\n\t\t\tif (axis === 0){ // x\r\n\t\t\t\tam[name][2] = cubeAxelMapping[name][1]\r\n\t\t\t\tam[name][1] = cubeAxelMapping[name][2]\r\n\t\t\t} else if (axis === 1){ // y\r\n\t\t\t\tam[name][2] = cubeAxelMapping[name][0]\r\n\t\t\t\tam[name][0] = cubeAxelMapping[name][2]\r\n\t\t\t} else if (axis === 2){ //z\r\n\t\t\t\tam[name][0] = cubeAxelMapping[name][1]\r\n\t\t\t\tam[name][1] = cubeAxelMapping[name][0]\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t})\r\n\treturn { rotations, am }\r\n}\r\n\r\nconst moves = {\r\n\t'f':{\r\n\t\tfaceConfig: 0,\r\n\t\toperation: rotatef,\r\n\t\tpositions: [0,1,2,3,4,5,6,7,8],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['f'].positions, false);\r\n\t\t}\r\n\t},\r\n\t'F':{\r\n\t\tfaceConfig: 0,\r\n\t\toperation: rotateF,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['f'].positions, true);\r\n\t\t}\r\n\t},\r\n\t'b':{\r\n\t\tfaceConfig: 0,\r\n\t\toperation: rotateb,\r\n\t\tpositions: [ 20,19,18,23,22,21,26,25,24 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['b'].positions, true);\r\n\t\t}\r\n\t},\r\n\t'B':{\r\n\t\tfaceConfig: 0,\r\n\t\toperation: rotateB,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['b'].positions, false);\r\n\t\t}\r\n\t},\r\n\t's':{\r\n\t\tfaceConfig: 0,\r\n\t\toperation: rotates,\r\n\t\tpositions: [ 9,10,11,12,13,14,15,16,17 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['s'].positions, false);\r\n\t\t}\r\n\t},\r\n\t'S':{\r\n\t\tfaceConfig: 0,\r\n\t\toperation: rotateS,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['s'].positions, true);\r\n\t\t}\r\n\t},\r\n\t'u':{\r\n\t\tfaceConfig: 1,\r\n\t\toperation: rotateu,\r\n\t\tpositions: [ 0,1,2,9,10,11,18,19,20 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['u'].positions, false, 1);\r\n\t\t}\r\n\t},\r\n\t'U':{\r\n\t\tfaceConfig: 1,\r\n\t\toperation: rotateU,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['u'].positions, true, 1);\r\n\t\t}\r\n\t},\r\n\t'd':{\r\n\t\tfaceConfig: 1,\r\n\t\toperation: rotated,\r\n\t\tpositions: [ 6,7,8,15,16,17,24,25,26 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['d'].positions, true, 1);\r\n\t\t}\r\n\t},\r\n\t'D':{\r\n\t\tfaceConfig: 1,\r\n\t\toperation: rotateD,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['d'].positions, false, 1);\r\n\t\t}\r\n\t},\r\n\t'e':{\r\n\t\tfaceConfig: 1,\r\n\t\toperation: rotatee,\r\n\t\tpositions: [ 3,4,5,12,13,14,21,22,23 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['e'].positions, true, 1);\r\n\t\t}\r\n\t},\r\n\t'E':{\r\n\t\tfaceConfig: 1,\r\n\t\toperation: rotateE,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['e'].positions, false, 1);\r\n\t\t}\r\n\t},\r\n\t'l':{\r\n\t\tfaceConfig: 2,\r\n\t\toperation: rotatel,\r\n\t\tpositions: [ 0,3,6,9,12,15,18,21,24 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['l'].positions, true, 0);\r\n\t\t}\r\n\t},\r\n\t'L':{\r\n\t\tfaceConfig: 2,\r\n\t\toperation: rotateL,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['l'].positions, false, 0);\r\n\t\t}\r\n\t},\r\n\t'r':{\r\n\t\tfaceConfig: 2,\r\n\t\toperation: rotater,\r\n\t\tpositions: [ 2,11,20,5,14,23,8,17,26 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['r'].positions, false, 0);\r\n\t\t}\r\n\t},\r\n\t'R':{\r\n\t\tfaceConfig: 2,\r\n\t\toperation: rotateR,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['r'].positions, true, 0);\r\n\t\t}\r\n\t},\r\n\t'm': {\r\n\t\tfaceConfig: 2,\r\n\t\toperation: rotatem,\r\n\t\tpositions: [ 1,10,19,4,13,22,7,16,25 ],\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['m'].positions, true, 0);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tfaceConfig: 2, \r\n\t\toperation: rotateM,\r\n\t\tcubeOperation: (cubeRotations, positions, cubeAxelMapping) => {\r\n\t\t\treturn rotateCube(cubeRotations, positions, cubeAxelMapping, moves['m'].positions, false, 0);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport {\r\n\tmoves\r\n}","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\App.js",["103"],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Rubiks.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Scene.js",["104"],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\State\\context.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Util\\Rotations.js",["105","106"],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Cube.js",["107"],"/* eslint-disable default-case */\r\nimport React, { useContext } from 'react'\r\nimport './ColorMaterial'\r\nimport { AppStateContext } from '../State/context'\r\nimport { Html } from 'drei';\r\nimport { Math } from 'three'\r\n\r\nfunction Cube(props) {\r\n\r\n\tconst state  = useContext(AppStateContext);\r\n\r\n\tconst colorMap = {\r\n\t\tblack: \"#000000\",\r\n\t\tred: \"red\",\r\n\t\tblue: \"blue\",\r\n\t\torange: \"#ce8500\",\r\n\t\tgreen: \"green\",\r\n\t\tyellow: \"yellow\",\r\n\t\twhite: \"#ffffff\"\r\n\t};\r\n\r\n\tconst getRealCubeName = (n) => {\r\n\t\tlet positionTranslated = state.positionMap[props.type].indexOf(n);\r\n\t\tlet realCubeName = state.positions[positionTranslated];\r\n\t\treturn realCubeName;\r\n\t}\r\n\r\n\tconst getColoredSides = () => {\r\n\r\n\t\tlet cubeID = getRealCubeName(props.colorID)\r\n\t\tlet arr = Array(6).fill(\"black\");\r\n\t\tlet blue = [2,11,20,5,14,23,8,17,26];\r\n\t\tlet green = [0,3,6,9,12,15,18,21,24];\r\n\t\tlet white = [0,1,2,9,10,11,18,19,20]\r\n\t\tlet yellow = [6,7,8,15,16,17,24,25,26];\r\n\t\tlet red = [0,1,2,3,4,5,6,7,8];\r\n\t\tlet orange = [24,25,26,21,22,23,18,19,20];\r\n\r\n\t\tif (blue.includes(cubeID)){\r\n\t\t\tarr[0] = \"blue\"\r\n\t\t}\r\n\t\tif (green.includes(cubeID)){\r\n\t\t\tarr[1] = \"green\"\r\n\t\t}\r\n\t\tif (white.includes(cubeID)){\r\n\t\t\tarr[2] = \"white\"\r\n\t\t}\r\n\t\tif (yellow.includes(cubeID)){\r\n\t\t\tarr[3] = \"yellow\"\r\n\t\t}\r\n\t\tif (red.includes(cubeID)){\r\n\t\t\tarr[4] = \"red\";\r\n\t\t}\r\n\t\tif (orange.includes(cubeID)){\r\n\t\t\tarr[5] = \"orange\"\r\n\t\t}\r\n\t\treturn arr.map(color => <meshBasicMaterial\r\n\t\t\tattachArray=\"material\"\r\n\t\t\tcolor={colorMap[color]}\r\n\t\t\tmetalness={1}\r\n\t\t/>);\r\n\t}\r\n\r\n\tlet cubeName = getRealCubeName(props.colorID);\r\n\tlet rotationsDeg = state.cubeRotations[getRealCubeName(props.colorID)]\r\n\t/*\r\n\tlet rotations = [\r\n\t\tMath.degToRad(rotationsDeg[state.cubeAxelMapping[cubeName][0]]),\r\n\t\tMath.degToRad(rotationsDeg[state.cubeAxelMapping[cubeName][1]]),\r\n\t\tMath.degToRad(rotationsDeg[state.cubeAxelMapping[cubeName][2]])\r\n\t]\r\n\t*/\r\n\tlet rotations = [\r\n\t\tMath.degToRad(rotationsDeg[0]),\r\n\t\tMath.degToRad(rotationsDeg[1]),\r\n\t\tMath.degToRad(rotationsDeg[2])\r\n\t]\r\n\r\n\treturn (\r\n\t<mesh\r\n\t\t{...props}\r\n\t\tcastShadow\r\n\t\trotation={rotations}\r\n\t>\r\n\r\n\t\t{ \r\n\t\t\t(getRealCubeName(props.colorID) === 0) ?\r\n\t\t\t(\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Html scaleFactor={5} position={[0,0,0]}>\r\n\t\t\t\t\t\t{ getRealCubeName(props.colorID) }\r\n\t\t\t\t\t</Html>\r\n\t\t\t\t<axesHelper size={20} />\r\n\t\t\t\t</>\r\n\t\t\t):null\r\n\t\t}\r\n\t\t<boxBufferGeometry args={[1, 1, 1]} attach=\"geometry\" />\r\n\t\t{ getColoredSides() }\r\n\t</mesh>\r\n\t)\r\n}\r\n\r\nexport default Cube",{"ruleId":"108","severity":1,"message":"109","line":10,"column":10,"nodeType":"110","messageId":"111","endLine":10,"endColumn":21},{"ruleId":"108","severity":1,"message":"112","line":145,"column":6,"nodeType":"110","messageId":"111","endLine":145,"endColumn":14},{"ruleId":"108","severity":1,"message":"113","line":146,"column":6,"nodeType":"110","messageId":"111","endLine":146,"endColumn":9},{"ruleId":"108","severity":1,"message":"114","line":175,"column":6,"nodeType":"110","messageId":"111","endLine":175,"endColumn":16},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"108","severity":1,"message":"119","line":300,"column":7,"nodeType":"110","messageId":"111","endLine":300,"endColumn":13},{"ruleId":"108","severity":1,"message":"120","line":323,"column":12,"nodeType":"110","messageId":"111","endLine":323,"endColumn":22},{"ruleId":"108","severity":1,"message":"121","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":10,"column":10,"nodeType":"110","messageId":"111","endLine":10,"endColumn":21},{"ruleId":"108","severity":1,"message":"119","line":300,"column":7,"nodeType":"110","messageId":"111","endLine":300,"endColumn":13},{"ruleId":"108","severity":1,"message":"120","line":323,"column":12,"nodeType":"110","messageId":"111","endLine":323,"endColumn":22},{"ruleId":"108","severity":1,"message":"122","line":64,"column":6,"nodeType":"110","messageId":"111","endLine":64,"endColumn":14},"no-unused-vars","'Environment' is defined but never used.","Identifier","unusedVar","'newState' is defined but never used.","'inc' is assigned a value but never used.","'faceConfig' is assigned a value but never used.","no-native-reassign",["123"],"no-negated-in-lhs",["124"],"'invert' is assigned a value but never used.","'adjustAxis' is defined but never used.","'TopBar' is defined but never used.","'cubeName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]