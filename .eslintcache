[{"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Scene.js":"1","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\App.js":"2","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\State\\context.js":"3","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Rubiks.js":"4","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\TopBar.js":"5","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Face.js":"6","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\reportWebVitals.js":"7","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceZero.js":"8","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceOne.js":"9","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceTwo.js":"10","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Cube.js":"11","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js":"12","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\index.js":"13","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Effects.js":"14","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Util\\Rotations.js":"15","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\App.js":"16","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Rubiks.js":"17","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js":"18","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Scene.js":"19","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\State\\context.js":"20","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Util\\Rotations.js":"21","C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Cube.js":"22","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\ControlDisplay.js":"23","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Environment.js":"24","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Title.js":"25","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Cubemap.js":"26","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Help.js":"27","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Hooks\\useGestures.js":"28","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Hooks\\useWindowSize.js":"29"},{"size":3183,"mtime":1632724397571,"results":"30","hashOfConfig":"31"},{"size":5389,"mtime":1632715949914,"results":"32","hashOfConfig":"31"},{"size":5508,"mtime":1632724336581,"results":"33","hashOfConfig":"31"},{"size":4052,"mtime":1632724673960,"results":"34","hashOfConfig":"31"},{"size":1121,"mtime":1630881826262,"results":"35","hashOfConfig":"31"},{"size":418,"mtime":1612336816333,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1611629125939,"results":"38","hashOfConfig":"31"},{"size":574,"mtime":1612500135755,"results":"39","hashOfConfig":"37"},{"size":576,"mtime":1612644836226,"results":"40","hashOfConfig":"37"},{"size":577,"mtime":1612500127501,"results":"41","hashOfConfig":"37"},{"size":1858,"mtime":1632637580109,"results":"42","hashOfConfig":"31"},{"size":712,"mtime":1612051596853,"results":"43","hashOfConfig":"37"},{"size":500,"mtime":1611629125939,"results":"44","hashOfConfig":"31"},{"size":1562,"mtime":1612063328330,"results":"45","hashOfConfig":"37"},{"size":5618,"mtime":1630823115198,"results":"46","hashOfConfig":"31"},{"size":1688,"mtime":1613547731608,"results":"47","hashOfConfig":"48"},{"size":3543,"mtime":1613547644210,"results":"49","hashOfConfig":"48"},{"size":712,"mtime":1612051596853,"results":"50","hashOfConfig":"48"},{"size":3203,"mtime":1613544973673,"results":"51","hashOfConfig":"48"},{"size":3963,"mtime":1613544472387,"results":"52","hashOfConfig":"48"},{"size":8454,"mtime":1613548263214,"results":"53","hashOfConfig":"48"},{"size":2409,"mtime":1613544106152,"results":"54","hashOfConfig":"48"},{"size":1077,"mtime":1632723001493,"results":"55","hashOfConfig":"31"},{"size":808,"mtime":1630882110128,"results":"56","hashOfConfig":"57"},{"size":1106,"mtime":1632630031942,"results":"58","hashOfConfig":"31"},{"size":352,"mtime":1630879644948,"results":"59","hashOfConfig":"57"},{"size":962,"mtime":1630879542402,"results":"60","hashOfConfig":"31"},{"size":8196,"mtime":1632636259883,"results":"61","hashOfConfig":"31"},{"size":866,"mtime":1632629039591,"results":"62","hashOfConfig":"31"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1kzzh0d",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"u12yq",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"8zvi1z",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1xe856p",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Scene.js",["127"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\App.js",["128"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\State\\context.js",["129"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Rubiks.js",["130","131"],"import React, {useRef, useContext, useState, useEffect } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { Vector3, MathUtils, Group } from 'three';\r\nimport { AppStateContext, AppDispatchContext } from '../State/context'\r\nimport { moves } from '../Util/Rotations';\r\nimport Cube from './Cube'\r\n\r\nfunction Rubiks(){\r\n\r\n\tconst block = useRef();\r\n\tconst degLimit = 90;\r\n\r\n\t// app state\r\n\tconst state  = useContext(AppStateContext);\r\n\tconst dispatch = useContext(AppDispatchContext);\r\n\r\n\t// internal state\r\n\tconst [degCount, setDegCount] = useState(0);\r\n\tconst [space, setSpace] = useState(0.05);\r\n\r\n\t// config\r\n\tconst speed = 0.05;\r\n\tconst degreeIncrement = 5;\r\n\r\n\t/*\r\n\t\tAnimation Loop\r\n\t\tLooks for changes to keyboard and makes changes\r\n\t*/\r\n\tuseFrame(() => {\r\n\t\t\r\n\t\t// whole cube rotation with arrow keys\r\n\t\tif (state.ArrowLeft){\r\n\t\t\tblock.current.rotation.y = block.current.rotation.y -= speed\r\n\t\t}\r\n\t\tif (state.ArrowRight){\r\n\t\t\tblock.current.rotation.y = block.current.rotation.y += speed\r\n\t\t}\r\n\t\tif (state.ArrowUp){\r\n\t\t\tblock.current.rotation.x = block.current.rotation.x -= speed\r\n\t\t}\r\n\t\tif (state.ArrowDown){\r\n\t\t\tblock.current.rotation.x = block.current.rotation.x += speed\r\n\t\t}\r\n\r\n\t\t// rotate faces with letter keys\r\n\t\tif (state.moving){\r\n\t\t\trotateFace(degreeIncrement);\r\n\t\t} else if (state.mixing) {\r\n\t\t\tdispatch({ type: 'doNextMix' });\r\n\t\t}\r\n\t})\r\n\r\n\tconst rotateFace = (increment) => {\r\n\t\tlet newDegCount = degCount + increment;\r\n\t\t// handle situation where degreeIncrement puts newDegCount over or under limit\r\n\t\tif (newDegCount >= degLimit){\r\n\t\t\tlet customInc = newDegCount % degLimit;\r\n\t\t\tsetDegCount(0);\r\n\t\t\tdispatch({ type: 'endMove' });\r\n\t\t\tperformRotateFaceAnimation(customInc);\r\n\t\t} else {\r\n\t\t\t// carry on like normal\r\n\t\t\tsetDegCount(newDegCount);\r\n\t\t\tperformRotateFaceAnimation(increment);\r\n\t\t}\r\n\t}\r\n\r\n\tconst shouldAttach = (each, index) => {\r\n\t\tlet relevantPositions = moves[state.letterKey.toLowerCase()].positions;\r\n\t\tlet relevantCubes = relevantPositions.map(pos => {\r\n\t\t\treturn state.positions[pos];\r\n\t\t});\r\n\t\treturn (\r\n\t\t\teach &&\r\n\t\t\teach.current &&\r\n\t\t\trelevantCubes.indexOf(index) >= 0\r\n\t\t);\r\n\t}\r\n\r\n\tconst performRotateFaceAnimation = (customInc) => {\r\n\t\tlet clockwise = state.letterKey === state.letterKey.toUpperCase();\r\n\t\tif (\r\n\t\t\tstate.letterKey.toUpperCase() === 'L' ||\r\n\t\t\tstate.letterKey.toUpperCase() === 'D' ||\r\n\t\t\tstate.letterKey.toUpperCase() === 'B' ||\r\n\t\t\tstate.letterKey.toUpperCase() === 'M' ||\r\n\t\t\tstate.letterKey.toUpperCase() === 'E'\r\n\t\t){\r\n\t\t\tclockwise = !clockwise;\r\n\t\t}\r\n\t\tconst axis = moves[state.letterKey].mainAxis;\r\n\t\tlet degrees = degreeIncrement;\r\n\t\tif (customInc){\r\n\t\t\tdegrees = customInc;\r\n\t\t}\r\n\t\tlet group = new Group();\r\n\t\tlet { cubeRefs, sceneRef } = state;\r\n\r\n\t\tcubeRefs.forEach((each, index) => {\r\n\t\t\tif (shouldAttach(each, index)){\r\n\t\t\t\tgroup.attach(each.current);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsceneRef.current.attach(group);\r\n\t\tgroup.rotateOnWorldAxis(new Vector3(\r\n\t\t\t(axis === 'x') ? 1:0,\r\n\t\t\t(axis === 'y') ? 1:0,\r\n\t\t\t(axis === 'z') ? 1:0\r\n\t\t), MathUtils.degToRad((clockwise) ? degrees:-degrees));\r\n\t\tcubeRefs.forEach((each, index) => {\r\n\t\t\tif (shouldAttach(each, index)){\r\n\t\t\t\tlet cubeID = state.positions[index];\r\n\t\t\t\tsceneRef.current.attach(each.current);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconst generatePositions = (offset) => {\r\n\t\tlet positions = [];\r\n\t\tfor (let z = 1; z >= -1; z--){\r\n\t\t\tfor (let y = 1; y >= -1; y--){\r\n\t\t\t\tfor (let x = -1; x <= 1; x++){\r\n\t\t\t\t\tlet pos = [x, y, z].map(e => e * (1 + offset));\r\n\t\t\t\t\tpositions.push(pos);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn positions;\r\n\t}\r\n\r\n\tconst getCubes = (offset) => {\r\n\t\tlet pos = generatePositions(offset);\r\n\t\treturn new Array(27).fill('empty').map(\r\n\t\t\t(each, index) => (\r\n\t\t\t\t<Cube position={pos[index]} ID={index} key={index} />\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (typeof dispatch === \"function\"){\r\n\t\t\tdispatch({ type: 'setSceneRef', payload: block })\r\n\t\t}\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<group ref={block} position={[0,0,0]} rotation={[0,0,0]/*[0.1,-0.6,0]*/}>\r\n\t\t\t{ getCubes(space) }\r\n\t\t</group>\r\n\t)\r\n}\r\n\r\nexport default Rubiks","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\TopBar.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Face.js",[],["132","133"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\reportWebVitals.js",[],["134","135"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceZero.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceOne.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\FaceTwo.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Cube.js",["136"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\index.js",[],["137","138"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Effects.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Util\\Rotations.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\App.js",["139"],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Rubiks.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\ColorMaterial.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Scene.js",["140"],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\State\\context.js",[],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Util\\Rotations.js",["141","142"],"C:\\Users\\16127\\desktop\\React\\rubiks\\src\\Components\\Cube.js",["143"],"/* eslint-disable default-case */\r\nimport React, { useContext } from 'react'\r\nimport './ColorMaterial'\r\nimport { AppStateContext } from '../State/context'\r\nimport { Html } from 'drei';\r\nimport { Math } from 'three'\r\n\r\nfunction Cube(props) {\r\n\r\n\tconst state  = useContext(AppStateContext);\r\n\r\n\tconst colorMap = {\r\n\t\tblack: \"#000000\",\r\n\t\tred: \"red\",\r\n\t\tblue: \"blue\",\r\n\t\torange: \"#ce8500\",\r\n\t\tgreen: \"green\",\r\n\t\tyellow: \"yellow\",\r\n\t\twhite: \"#ffffff\"\r\n\t};\r\n\r\n\tconst getRealCubeName = (n) => {\r\n\t\tlet positionTranslated = state.positionMap[props.type].indexOf(n);\r\n\t\tlet realCubeName = state.positions[positionTranslated];\r\n\t\treturn realCubeName;\r\n\t}\r\n\r\n\tconst getColoredSides = () => {\r\n\r\n\t\tlet cubeID = getRealCubeName(props.colorID)\r\n\t\tlet arr = Array(6).fill(\"black\");\r\n\t\tlet blue = [2,11,20,5,14,23,8,17,26];\r\n\t\tlet green = [0,3,6,9,12,15,18,21,24];\r\n\t\tlet white = [0,1,2,9,10,11,18,19,20]\r\n\t\tlet yellow = [6,7,8,15,16,17,24,25,26];\r\n\t\tlet red = [0,1,2,3,4,5,6,7,8];\r\n\t\tlet orange = [24,25,26,21,22,23,18,19,20];\r\n\r\n\t\tif (blue.includes(cubeID)){\r\n\t\t\tarr[0] = \"blue\"\r\n\t\t}\r\n\t\tif (green.includes(cubeID)){\r\n\t\t\tarr[1] = \"green\"\r\n\t\t}\r\n\t\tif (white.includes(cubeID)){\r\n\t\t\tarr[2] = \"white\"\r\n\t\t}\r\n\t\tif (yellow.includes(cubeID)){\r\n\t\t\tarr[3] = \"yellow\"\r\n\t\t}\r\n\t\tif (red.includes(cubeID)){\r\n\t\t\tarr[4] = \"red\";\r\n\t\t}\r\n\t\tif (orange.includes(cubeID)){\r\n\t\t\tarr[5] = \"orange\"\r\n\t\t}\r\n\t\treturn arr.map(color => <meshBasicMaterial\r\n\t\t\tattachArray=\"material\"\r\n\t\t\tcolor={colorMap[color]}\r\n\t\t\tmetalness={1}\r\n\t\t/>);\r\n\t}\r\n\r\n\tlet cubeName = getRealCubeName(props.colorID);\r\n\tlet rotationsDeg = state.cubeRotations[getRealCubeName(props.colorID)]\r\n\t/*\r\n\tlet rotations = [\r\n\t\tMath.degToRad(rotationsDeg[state.cubeAxelMapping[cubeName][0]]),\r\n\t\tMath.degToRad(rotationsDeg[state.cubeAxelMapping[cubeName][1]]),\r\n\t\tMath.degToRad(rotationsDeg[state.cubeAxelMapping[cubeName][2]])\r\n\t]\r\n\t*/\r\n\tlet rotations = [\r\n\t\tMath.degToRad(rotationsDeg[0]),\r\n\t\tMath.degToRad(rotationsDeg[1]),\r\n\t\tMath.degToRad(rotationsDeg[2])\r\n\t]\r\n\r\n\treturn (\r\n\t<mesh\r\n\t\t{...props}\r\n\t\tcastShadow\r\n\t\trotation={rotations}\r\n\t>\r\n\r\n\t\t{ \r\n\t\t\t(getRealCubeName(props.colorID) === 0) ?\r\n\t\t\t(\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Html scaleFactor={5} position={[0,0,0]}>\r\n\t\t\t\t\t\t{ getRealCubeName(props.colorID) }\r\n\t\t\t\t\t</Html>\r\n\t\t\t\t<axesHelper size={20} />\r\n\t\t\t\t</>\r\n\t\t\t):null\r\n\t\t}\r\n\t\t<boxBufferGeometry args={[1, 1, 1]} attach=\"geometry\" />\r\n\t\t{ getColoredSides() }\r\n\t</mesh>\r\n\t)\r\n}\r\n\r\nexport default Cube","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\ControlDisplay.js",["144"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Environment.js",["145"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Title.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Cubemap.js",["146"],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Components\\Help.js",[],"C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Hooks\\useGestures.js",["147","148","149","150","151"],"import { useEffect, useRef } from 'react';\r\nimport useWindowSize from './useWindowSize';\r\n\r\nconst useGestures = (ref) =>  {\r\n\t\r\n\tconst { windowWidth } = useWindowSize();\r\n\tconst position = useRef({x: 'x', y: 'y'});\r\n\tconst points = useRef([]);\r\n\tlet touches = [];\r\n\tlet clear = true;\r\n\tlet running = false;\r\n\r\n\tconst handleGestureStart = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (window.PointerEvent) {\r\n\t\t\te.target.setPointerCapture(e.pointerId);\r\n\t\t}\r\n\t\ttouches.push(e.pointerId);\r\n\t\tif (touches.length <= 1){\r\n\t\t\tclear = true;\r\n\t\t\trunning = false;\r\n\t\t} else {\r\n\t\t\tclear = false;\r\n\t\t}\r\n\t\tposition.current = getGesturePointFromEvent(e);\r\n\t\tpoints.current = [position.current, ...points.current];\r\n\t}\r\n\r\n\tconst handleGestureMove = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (touches.length > 1){\r\n\t\t\tclear = false;\r\n\t\t}\r\n\t\tposition.current = getGesturePointFromEvent(e);\r\n\t\tpoints.current = [position.current, ...points.current];\r\n\t}\r\n\r\n\tconst handleGestureEnd = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (touches.length > 1){\r\n\t\t\tclear = false;\r\n\t\t}\r\n\t\ttouches = touches.filter(touch => touch !== e.pointerId);\r\n\r\n\t\tif (!running){\r\n\t\t\tif (touches && touches.length <= 1 && clear){\r\n\t\t\t\trunning = true;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\trunning = false;\r\n\t\t\t\t}, 3000)\r\n\t\t\t\tprocessGesture(points.current, e);\r\n\t\t\t\tpoints.current = [];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst getGesturePointFromEvent = (e) => {\r\n\t\tvar point = {};\r\n\t\tif(e.targetTouches) {\r\n\t\t\tpoint.x = e.targetTouches[0].offsetX;\r\n\t\t\tpoint.y = e.targetTouches[0].offsetY;\r\n\t\t} else {\r\n\t\t\tpoint.x = e.offsetX;\r\n\t\t\tpoint.y = e.offsetY;\r\n\t\t}\r\n\t\treturn point;\r\n\t}\r\n\r\n\tconst processGesture = (points) => {\r\n\t\tif (points.length <= 0) return;\r\n\r\n\t\t// get the targets dimensions\r\n\t\tconst element_dimensions = ref.current.getBoundingClientRect();\r\n\r\n\t\t// more work to determine that it's something resembling a circle\r\n\t\tlet half_width = Math.floor(element_dimensions.width / 2);\r\n\t\tlet half_height = Math.floor(element_dimensions.height / 2);\r\n\r\n\t\t// some circle helpers\r\n\t\tconst getQuadrant = (point) => {\r\n\t\t\tif (point.x < half_width && point.y < half_height){\r\n\t\t\t\treturn 0;\r\n\t\t\t} else if (point.x > half_width && point.y < half_height){\r\n\t\t\t\treturn 1;\r\n\t\t\t} else if (point.x > half_width && point.y > half_height){\r\n\t\t\t\treturn 2;\r\n\t\t\t} else {\r\n\t\t\t\treturn 3;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// detect tap\r\n\t\t// first see if the draw path (rough estimate) is longer than the width and height\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t// is pretty short\r\n\t\t\t\tpoints.length < (element_dimensions.width / 5) &&\r\n\t\t\t\tpoints.length < (element_dimensions.height / 5)\r\n\t\t\t) && (\r\n\t\t\t\t// starts and ends in same place\r\n\t\t\t\tgetQuadrant(points[0]) === getQuadrant(points[points.length - 1])\r\n\t\t\t)\r\n\t\t){\r\n\r\n\t\t\t// which quandrant tapped\r\n\t\t\tlet quadrant = getQuadrant(points[0]);\r\n\t\t\tif (quadrant == 0){\r\n\t\t\t\tGestures.dispatch('tap-top-left', {});\r\n\t\t\t} else if (quadrant == 1){\r\n\t\t\t\tGestures.dispatch('tap-top-right', {});\r\n\t\t\t} else if (quadrant == 2){\r\n\t\t\t\tGestures.dispatch('tap-bottom-right', {});\r\n\t\t\t} else {\r\n\t\t\t\tGestures.dispatch('tap-bottom-left', {});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if (\r\n\t\t\tpoints.length > (element_dimensions.width) &&\r\n\t\t\tpoints.length > (element_dimensions.height)\r\n\t\t){\r\n\r\n\t\t\t/*\r\n\t\t\t\tpretty sure its a circle by this point\r\n\t\t\t\twe could also check that each part is container within the same quadrant of the parent to\r\n\t\t\t\trule out any zigzag stuff, but this should do fine\r\n\t\t\t*/\r\n\t\t\tlet third_index = Math.floor(points.length / 3);\r\n\t\t\tlet four_points = [\r\n\t\t\t\tpoints[0],\r\n\t\t\t\tpoints[third_index],\r\n\t\t\t\tpoints[third_index * 2],\r\n\t\t\t\tpoints[points.length - 1]\r\n\t\t\t];\r\n\t\t\tconst four_point_quadrants = four_points.map(point => getQuadrant(point));\r\n\r\n\t\t\t// determine if it's clockwise or counter clockwise\r\n\t\t\t// first find which axis has the greatest difference between points 1 and 3\r\n\t\t\tconst vertical_disparity   = Math.abs(four_points[0].y - four_points[2].y);\r\n\t\t\tconst horizontal_disparity = Math.abs(four_points[0].x - four_points[2].x);\r\n\r\n\t\t\t// log some more of what we are using to find the circle direction\r\n\r\n\t\t\tif (horizontal_disparity > vertical_disparity){\r\n\t\t\t\t// x had the greater disparity\r\n\t\t\t\t// if point 2 is lower than point 4, its a counter clockwise circle\r\n\t\t\t\tif (four_points[1].y < four_points[3].y){\r\n\t\t\t\t\tGestures.dispatch('counter-clockwise', {});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tGestures.dispatch('clockwise', {});\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// y had the greater disparity\r\n\t\t\t\t// if point two is to the left of point 4, its a counter clockwise circle\r\n\t\t\t\tif (four_points[1].x < four_points[3].x){\r\n\t\t\t\t\tGestures.dispatch('counter-clockwise', {});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tGestures.dispatch('clockwise', {});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t/*\r\n\t\t\tNOT A CIRCLE, LET'S FIGURE OUT THE LINES\r\n\t\t*/\r\n\t\t}\telse {\r\n\r\n\t\t\t// define line helper functions\r\n\t\t\tconst isSwiperRight = (points) => {\r\n\t\t\t\t// is swipe right\r\n\t\t\t\tif (\r\n\t\t\t\t\tpoints[0].x > points[points.length - 1].x && \r\n\t\t\t\t\tMath.abs(points[0].x - points[points.length - 1].x) > 50\r\n\t\t\t\t){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} \r\n\t\t\t\t// is swipe left\r\n\t\t\t\telse if (\r\n\t\t\t\t\tpoints[0].x < points[points.length - 1].x &&\r\n\t\t\t\t\tMath.abs(points[0].x - points[points.length - 1].x) > 50\r\n\t\t\t\t){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst isSwiperUp = (points) => {\r\n\t\t\t\t// is swipe up\r\n\t\t\t\tif (\r\n\t\t\t\t\tpoints[0].y < points[points.length - 1].y &&\r\n\t\t\t\t\tMath.abs(points[0].y - points[points.length - 1].y) > 50\r\n\t\t\t\t){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} \r\n\t\t\t\t// is swipe down\r\n\t\t\t\telse if (\r\n\t\t\t\t\tpoints[0].y > points[points.length - 1].x &&\r\n\t\t\t\t\tMath.abs(points[0].y - points[points.length - 1].y) > 50\r\n\t\t\t\t){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// is closer to a horizontal line than vertical?\r\n\t\t\tif (\r\n\t\t\t\tMath.abs(points[0].x - points[points.length - 1].x) >\r\n\t\t\t\tMath.abs(points[0].y - points[points.length - 1].y)\r\n\t\t\t){\r\n\t\t\t\t// is bottom\r\n\t\t\t\tconst midline_horizontal = element_dimensions.height / 2;\r\n\t\t\t\tif (\r\n\t\t\t\t\t(points[0].y > midline_horizontal) &&\r\n\t\t\t\t\t(points[points.length - 1].y > midline_horizontal)\r\n\t\t\t\t){\r\n\t\t\t\t\tif (isSwiperRight(points)){\r\n\t\t\t\t\t\tGestures.dispatch('bottom-right', {});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tGestures.dispatch('bottom-left', {});\r\n\t\t\t\t\t}\r\n\t\t\t\t// is top\r\n\t\t\t\t} else if (\r\n\t\t\t\t\t(points[0].y < midline_horizontal) &&\r\n\t\t\t\t\t(points[points.length - 1].y < midline_horizontal)\r\n\t\t\t\t){\r\n\t\t\t\t\tif (isSwiperRight(points)){\r\n\t\t\t\t\t\tGestures.dispatch('top-right', {});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tGestures.dispatch('top-left', {});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// is left\r\n\t\t\t\tconst midline_vertical = element_dimensions.width / 2;\r\n\t\t\t\tif (\r\n\t\t\t\t\t(points[0].x < midline_vertical) &&\r\n\t\t\t\t\t(points[points.length - 1].x < midline_vertical)\r\n\t\t\t\t){\r\n\t\t\t\t\tif (isSwiperUp(points)){\r\n\t\t\t\t\t\tGestures.dispatch('left-up', {});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tGestures.dispatch('left-down', {});\r\n\t\t\t\t\t}\r\n\t\t\t\t// is right\r\n\t\t\t\t} else if (\r\n\t\t\t\t\t(points[0].x > midline_vertical) &&\r\n\t\t\t\t\t(points[points.length - 1].x > midline_vertical)\r\n\t\t\t\t){\r\n\t\t\t\t\tif (isSwiperUp(points)){\r\n\t\t\t\t\t\tGestures.dispatch('right-up', {});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tGestures.dispatch('right-down', {});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet element = ref.current;\r\n\t\tif (windowWidth <= 800){\r\n\t\t\telement.addEventListener('pointerdown', handleGestureStart, true);\r\n\t\t\telement.addEventListener('pointermove', handleGestureMove, true);\r\n\t\t\telement.addEventListener('pointerup', handleGestureEnd, true);\r\n\t\t\telement.addEventListener('pointercancel', handleGestureEnd, true);\r\n\t\t\treturn () => {\r\n\t\t\t\telement.removeEventListener('pointerdown', handleGestureStart, true);\r\n\t\t\t\telement.removeEventListener('pointermove', handleGestureMove, true);\r\n\t\t\t\telement.removeEventListener('pointerup', handleGestureEnd, true);\r\n\t\t\t\telement.removeEventListener('pointercancel', handleGestureEnd, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst Gestures = {\r\n\t\t_events: {},\r\n\t\tdispatch(event, data) {\r\n\t\t  if (!this._events[event]) return;\r\n\t\t  this._events[event].forEach(callback => callback(data))\r\n\t\t},\r\n\t\tsubscribe(event, callback) {\r\n\t\t  if (!this._events[event]) this._events[event] = [];\r\n\t\t  this._events[event].push(callback);\r\n\t\t},\r\n\t\tunsubscribe(event) {\r\n\t\t  if (!this._events[event]) return;\r\n\t\t  delete this._events[event];\r\n\t\t}\r\n\t}\r\n\r\n\treturn Gestures\r\n}\r\n\r\nexport default useGestures;","C:\\Users\\16127\\Desktop\\React\\rubiks\\src\\Hooks\\useWindowSize.js",[],{"ruleId":"152","severity":1,"message":"153","line":71,"column":52,"nodeType":"154","messageId":"155","endLine":71,"endColumn":54},{"ruleId":"156","severity":1,"message":"157","line":177,"column":5,"nodeType":"158","endLine":177,"endColumn":7,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":89,"column":2,"nodeType":"162","messageId":"163","endLine":269,"endColumn":3},{"ruleId":"164","severity":1,"message":"165","line":19,"column":16,"nodeType":"166","messageId":"167","endLine":19,"endColumn":24},{"ruleId":"164","severity":1,"message":"168","line":112,"column":9,"nodeType":"166","messageId":"167","endLine":112,"endColumn":15},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"169","replacedBy":"173"},{"ruleId":"171","replacedBy":"174"},{"ruleId":"156","severity":1,"message":"175","line":61,"column":5,"nodeType":"158","endLine":61,"endColumn":15,"suggestions":"176"},{"ruleId":"169","replacedBy":"177"},{"ruleId":"171","replacedBy":"178"},{"ruleId":"164","severity":1,"message":"179","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":14},{"ruleId":"164","severity":1,"message":"180","line":10,"column":10,"nodeType":"166","messageId":"167","endLine":10,"endColumn":21},{"ruleId":"164","severity":1,"message":"181","line":300,"column":7,"nodeType":"166","messageId":"167","endLine":300,"endColumn":13},{"ruleId":"164","severity":1,"message":"182","line":323,"column":12,"nodeType":"166","messageId":"167","endLine":323,"endColumn":22},{"ruleId":"164","severity":1,"message":"183","line":64,"column":6,"nodeType":"166","messageId":"167","endLine":64,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":9,"column":2,"nodeType":"186","messageId":"187","endLine":13,"endColumn":5},{"ruleId":"156","severity":1,"message":"188","line":22,"column":5,"nodeType":"158","endLine":22,"endColumn":11,"suggestions":"189"},{"ruleId":"164","severity":1,"message":"190","line":2,"column":10,"nodeType":"166","messageId":"167","endLine":2,"endColumn":25},{"ruleId":"152","severity":1,"message":"191","line":107,"column":17,"nodeType":"154","messageId":"155","endLine":107,"endColumn":19},{"ruleId":"152","severity":1,"message":"191","line":109,"column":24,"nodeType":"154","messageId":"155","endLine":109,"endColumn":26},{"ruleId":"152","severity":1,"message":"191","line":111,"column":24,"nodeType":"154","messageId":"155","endLine":111,"endColumn":26},{"ruleId":"164","severity":1,"message":"192","line":134,"column":10,"nodeType":"166","messageId":"167","endLine":134,"endColumn":30},{"ruleId":"156","severity":1,"message":"193","line":268,"column":5,"nodeType":"158","endLine":268,"endColumn":7,"suggestions":"194"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Gestures', 'state.moving', and 'windowWidth'. Either include them or remove the dependency array.","ArrayExpression",["195"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'setSpace' is assigned a value but never used.","Identifier","unusedVar","'cubeID' is assigned a value but never used.","no-native-reassign",["196"],"no-negated-in-lhs",["197"],["196"],["197"],"React Hook useEffect has a missing dependency: 'props.ID'. Either include it or remove the dependency array.",["198"],["196"],["197"],"'TopBar' is defined but never used.","'Environment' is defined but never used.","'invert' is assigned a value but never used.","'adjustAxis' is defined but never used.","'cubeName' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'loader' and 'scene'. Either include them or remove the dependency array.",["199"],"'AppStateContext' is defined but never used.","Expected '===' and instead saw '=='.","'four_point_quadrants' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleGestureEnd', 'handleGestureMove', 'handleGestureStart', 'ref', and 'windowWidth'. Either include them or remove the dependency array.",["200"],{"desc":"201","fix":"202"},"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [Gestures, state.moving, windowWidth]",{"range":"209","text":"210"},"Update the dependencies array to be: [dispatch, props.ID]",{"range":"211","text":"212"},"Update the dependencies array to be: [loader, path, scene]",{"range":"213","text":"214"},"Update the dependencies array to be: [handleGestureEnd, handleGestureMove, handleGestureStart, ref, windowWidth]",{"range":"215","text":"216"},[4860,4862],"[Gestures, state.moving, windowWidth]",[1476,1486],"[dispatch, props.ID]",[653,659],"[loader, path, scene]",[7725,7727],"[handleGestureEnd, handleGestureMove, handleGestureStart, ref, windowWidth]"]